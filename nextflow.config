/*
 * -------------------------------------------------
 *  Pipeline config
 * -------------------------------------------------
 */

// Global default params
params {

    // Read aligning + counting
    aligner                    = 'bwa'
    paired                     = false
    strandedness               = 'reverse'
    fragment_len               = 150 
    fragment_sd                = 20
    ref_ann                    = false
    
    // Trimming
    save_trimmed               = true
    skip_trimming              = false

    // Differential expression and functional enrichment
    contrast_file              = false
    func_file                  = false
    p_thresh                   = 0.05
    l2fc_thresh                = 1

    // Options: Other
    help                       = false
    name                       = false   // optional name for the pipeline run
    outdir                     = './results'
    cachedir                   = './'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '192.GB'
    max_cpus                   = 56
    max_time                   = '10000.h'

    // Config options
    config_profile_name        = null

}


profiles {
    conda {
        params.enable_conda    = true
        process.conda          = "$baseDir/environment.yml"
        conda.createTimeout    = '2 h'
        // includeConfig 'configs/container.config'
    }
    docker {
        process.container      = 'adamd3/bactseq:latest'
        docker {
            enabled            = true
            userEmulation      = true
            runOptions         = '--pull=always'
        }
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        // includeConfig 'configs/container.config'
    }
    singularity {
        process.container      = 'adamd3/bactseq:latest'
        singularity {
            enabled            = true
            cacheDir           = params.cachedir
            autoMounts         = true
            runOptions         = "--bind $PWD"
        }
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        // singularity_pull_docker_container = false
        // includeConfig 'configs/container.config'
    }
    test { 
        includeConfig 'configs/test.config'
    }
}

// Export these variables to prevent local Python/R libraries from 
// conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Default configuration for the processes in the pipeline
process {

    maxRetries = 2
    errorStrategy = { task.attempt <= maxRetries  ? 'retry' : 'terminate' }

    // Capture exit codes from upstream processes when piping
    shell = ['/bin/bash', '-euo', 'pipefail']

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
