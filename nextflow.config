/*
 * -------------------------------------------------
 *  Pipeline config
 * -------------------------------------------------
 */

// Global default params
params {
    // Trimming
    save_trimmed               = false
    skip_trimming              = false

    // Alignment
    skip_alignment             = false

    // QC
    skip_qc                    = false
    skip_fastqc                = false
    skip_multiqc               = false

    // Options: Other
    help                       = false
    name                       = false   // optional name for the pipeline run
    outdir                     = './results'
    enable_conda               = false
    singularity_pull_docker_container = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}


profiles {
    conda {
        process.conda = "$baseDir/environment.yml"
    }
    docker {
        docker.enabled         = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
}



// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Default configuration for the processes in the pipeline
process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Capture exit codes from upstream processes when piping
    shell = ['/bin/bash', '-euo', 'pipefail']

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    // containers:
    withName: MAKE_META_FILE  { container = 'quay.io/biocontainers/pandas:1.1.5' }
    withName: TRIMGALORE      { container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }
    withName: MAKE_BWA_INDEX  { container = 'quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8' }
    withName: BWA_ALIGN       { container = 'quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8' }
    <!-- withName: COUNT_READS     { container = 'quay.io/biocontainers/bioconductor-rsubread:2.8.0--r41hd029910_0' }
    withName: COUNT_READS     { container = 'nanozoo/r_ggplot2:0.1--6405f6d' }
    withName: COUNT_READS     { container = 'quay.io/biocontainers/r-stringr:1.1.0--r3.3.1_0' } -->
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
